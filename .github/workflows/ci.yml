name: CI/CD

on:
  push:
    branches: [main, solutions]
  pull_request:
    branches: [main]

jobs:
  backend-checks:
    name: Setup Python Env
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: todo
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:password@localhost:5432/todo

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Sync backend dependencies
        working-directory: 01-containerization/apps/backend
        run: uv sync --group dev

      - name: Lint backend
        working-directory: 01-containerization/apps/backend
        run: uv run ruff check .

      - name: Run backend tests
        working-directory: 01-containerization/apps/backend
        run: uv run pytest --cov --cov-report term --cov-report xml:coverage.xml --junitxml=report.xml

  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install frontend dependencies
        working-directory: 01-containerization/apps/frontend
        run: npm ci

      - name: Lint frontend
        working-directory: 01-containerization/apps/frontend
        run: npm run lint

  docker:
    name: Build & Push Docker Images
    needs: [backend-checks, lint-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/deployment-basics/todo-backend
      FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/deployment-basics/todo-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Backend
        run: |
          docker build -t $BACKEND_IMAGE:latest 01-containerization/apps/backend
          docker push $BACKEND_IMAGE:latest

      - name: Build and Push Frontend
        run: |
          docker build -t $FRONTEND_IMAGE:latest 01-containerization/apps/frontend
          docker push $FRONTEND_IMAGE:latest
